{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/oferfive/Should_i_move_my_money/blob/master/Should_I_move_my_money%3F\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "swfmVfDHlyHO"
      },
      "outputs": [],
      "source": [
        "import datetime\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Define ANSI escape codes for colors (only for recommendation)\n",
        "BOLD = '\\033[1m'\n",
        "DARK_GREEN = '\\033[38;2;92;128;1m'  # #5C8001\n",
        "RED = '\\033[38;2;251;52;7m'       # #FB3407\n",
        "END = '\\033[0m'\n",
        "\n",
        "class IsraeliInvestmentAnalyzer:\n",
        "    def __init__(self):\n",
        "        self.tax_rate = 0.25  # Standard capital gains tax rate in Israel\n",
        "        self.cpi_data = {\n",
        "            2015: 100.0, 2016: 100.0, 2017: 100.2, 2018: 101.0, 2019: 101.9,\n",
        "            2020: 101.3, 2021: 102.8, 2022: 107.3, 2023: 111.8, 2024: 113.8\n",
        "        }\n",
        "        self.yearly_deposits = {}\n",
        "        self.current_value = 0\n",
        "        self.current_yield = 0\n",
        "        self.new_yield = 0\n",
        "        self.current_commission = 0\n",
        "        self.new_commission = 0\n",
        "        self.new_transaction_fee = 0\n",
        "        self.years_to_project = 0\n",
        "\n",
        "    def print_instructions(self):\n",
        "        print(\"\\n\" + \"=\"*50)\n",
        "        print(f\"{BOLD}Instructions:{END}\")\n",
        "        print(\"- Enter the year and deposit amount when prompted.\")\n",
        "        print(\"- Type 'undo' to remove the last entered deposit.\")\n",
        "        print(\"- Type 'done' to finish entering deposits and proceed.\")\n",
        "        print(\"- Type 'help' at any time to see these instructions again.\")\n",
        "        print(\"=\"*50 + \"\\n\")\n",
        "\n",
        "    def get_current_investment_details(self):\n",
        "        print(\"Please enter your current investment details:\")\n",
        "        self.print_instructions()\n",
        "        while True:\n",
        "            year_input = input(\"Enter the year of deposit (or 'done', 'undo', 'help'): \")\n",
        "            if year_input.lower() == 'done':\n",
        "                if not self.yearly_deposits:\n",
        "                    print(\"You must enter at least one deposit before proceeding.\")\n",
        "                    continue\n",
        "                break\n",
        "            elif year_input.lower() == 'undo':\n",
        "                if self.yearly_deposits:\n",
        "                    last_year = max(self.yearly_deposits.keys())\n",
        "                    del self.yearly_deposits[last_year]\n",
        "                    print(f\"Removed deposit for year {last_year}\")\n",
        "                else:\n",
        "                    print(\"No deposits to undo.\")\n",
        "                continue\n",
        "            elif year_input.lower() == 'help':\n",
        "                self.print_instructions()\n",
        "                continue\n",
        "\n",
        "            try:\n",
        "                year = int(year_input)\n",
        "                deposit = float(input(f\"Enter total deposit amount for {year}: \"))\n",
        "                self.yearly_deposits[year] = deposit\n",
        "                print(f\"Added deposit of ₪{deposit:.2f} for year {year}\")\n",
        "            except ValueError:\n",
        "                print(\"Invalid input. Please enter a valid year and deposit amount.\")\n",
        "\n",
        "        while True:\n",
        "            try:\n",
        "                self.current_value = float(input(\"Enter the current total worth of the investment: \"))\n",
        "                self.current_commission = float(input(\"Current investment's annual commission rate (as a decimal, e.g., 0.01 for 1%): \"))\n",
        "                break\n",
        "            except ValueError:\n",
        "                print(\"Invalid input. Please enter valid numeric values.\")\n",
        "\n",
        "    def calculate_yields(self):\n",
        "        total_deposited = sum(self.yearly_deposits.values())\n",
        "        years = max(self.yearly_deposits.keys()) - min(self.yearly_deposits.keys()) + 1\n",
        "\n",
        "        overall_yield = (self.current_value - total_deposited) / total_deposited\n",
        "        annual_yield = (1 + overall_yield) ** (1/years) - 1\n",
        "\n",
        "        return overall_yield, annual_yield\n",
        "\n",
        "    def get_new_investment_details(self):\n",
        "        print(\"\\nPlease enter details for the potential new investment:\")\n",
        "        print(\"(Type 'undo' at any prompt to remove the last entered detail)\")\n",
        "        details = {}\n",
        "        questions = [\n",
        "            (\"Expected annual yield\", \"New investment's expected annual yield (as a decimal, e.g., 0.08 for 8%): \"),\n",
        "            (\"Annual commission rate\", \"New investment's annual commission rate (as a decimal, e.g., 0.015 for 1.5%): \"),\n",
        "            (\"Transaction fee rate\", \"New investment's transaction fee rate (as a decimal, e.g., 0.001 for 0.1%): \"),\n",
        "            (\"Years to project\", \"Number of years to project for comparison: \")\n",
        "        ]\n",
        "\n",
        "        for key, prompt in questions:\n",
        "            while True:\n",
        "                user_input = input(prompt)\n",
        "                if user_input.lower() == 'undo':\n",
        "                    if details:\n",
        "                        removed_key, removed_value = details.popitem()\n",
        "                        print(f\"Removed: {removed_key} = {removed_value}\")\n",
        "                    else:\n",
        "                        print(\"Nothing to undo.\")\n",
        "                    continue\n",
        "\n",
        "                try:\n",
        "                    if key == \"Years to project\":\n",
        "                        value = int(user_input)\n",
        "                    else:\n",
        "                        value = float(user_input)\n",
        "                    details[key] = value\n",
        "                    break\n",
        "                except ValueError:\n",
        "                    print(\"Invalid input. Please enter a valid number.\")\n",
        "\n",
        "        self.new_yield = details['Expected annual yield']\n",
        "        self.new_commission = details['Annual commission rate']\n",
        "        self.new_transaction_fee = details['Transaction fee rate']\n",
        "        self.years_to_project = details['Years to project']\n",
        "\n",
        "        print(\"\\nNew investment details summary:\")\n",
        "        for key, value in details.items():\n",
        "            print(f\"{key}: {value}\")\n",
        "\n",
        "    def calculate_tax(self):\n",
        "        adjusted_deposits = self.adjust_for_inflation()\n",
        "        adjusted_total_deposited = sum(adjusted_deposits.values())\n",
        "        print(f\"Total adjusted deposits: ₪{adjusted_total_deposited:.2f}\")\n",
        "\n",
        "        real_gain = self.current_value - adjusted_total_deposited\n",
        "        if real_gain <= 0:\n",
        "            return 0, adjusted_total_deposited\n",
        "\n",
        "        tax = real_gain * self.tax_rate\n",
        "        return tax, adjusted_total_deposited\n",
        "\n",
        "    def adjust_for_inflation(self):\n",
        "        latest_cpi = self.get_latest_cpi()\n",
        "        print(f\"Latest CPI: {latest_cpi}\")\n",
        "        adjusted_deposits = {}\n",
        "        for year, deposit in self.yearly_deposits.items():\n",
        "            cpi_for_year = self.cpi_data.get(year, latest_cpi)\n",
        "            adjustment_factor = latest_cpi / cpi_for_year\n",
        "            adjusted_deposit = deposit * adjustment_factor\n",
        "            adjusted_deposits[year] = adjusted_deposit\n",
        "            print(f\"Year: {year}, Original: ₪{deposit:.2f}, CPI: {cpi_for_year}, Adjusted: ₪{adjusted_deposit:.2f}\")\n",
        "        return adjusted_deposits\n",
        "\n",
        "    def get_latest_cpi(self):\n",
        "        return self.cpi_data[max(self.cpi_data.keys())]\n",
        "\n",
        "    def project_investment(self, start_value, yield_rate, commission_rate, transaction_fee, years):\n",
        "        value = start_value * (1 - transaction_fee)\n",
        "        for _ in range(years):\n",
        "            value *= (1 + yield_rate) * (1 - commission_rate)\n",
        "        return value\n",
        "\n",
        "    def find_break_even_point(self, current_value, new_value):\n",
        "        year = 0\n",
        "        while new_value <= current_value and year <= 100:\n",
        "            year += 1\n",
        "            current_value *= (1 + self.current_yield) * (1 - self.current_commission)\n",
        "            new_value *= (1 + self.new_yield) * (1 - self.new_commission)\n",
        "        return year if year <= 100 else \"Never\"\n",
        "\n",
        "    def analyze_current_investment(self):\n",
        "        self.get_current_investment_details()\n",
        "        overall_yield, annual_yield = self.calculate_yields()\n",
        "\n",
        "        print(f\"\\nOverall yield of current investment: {overall_yield:.2%}\")\n",
        "        print(f\"Calculated average annual yield of current investment: {annual_yield:.2%}\")\n",
        "\n",
        "        use_calculated = input(\"Do you want to use this calculated annual yield for comparison? (y/n): \").lower() == 'y'\n",
        "        self.current_yield = annual_yield if use_calculated else float(input(\"Enter the annual yield to use for comparison (as a decimal, e.g., 0.05 for 5%): \"))\n",
        "\n",
        "        tax, adjusted_total_deposited = self.calculate_tax()\n",
        "\n",
        "        print(\"\\nCurrent Investment Analysis:\")\n",
        "        print(f\"Total deposited: ₪{sum(self.yearly_deposits.values()):,.2f}\")\n",
        "        print(f\"Inflation-adjusted total deposited: ₪{adjusted_total_deposited:,.2f}\")\n",
        "        print(f\"Current value: ₪{self.current_value:,.2f}\")\n",
        "        print(f\"Real capital gain: ₪{self.current_value - adjusted_total_deposited:,.2f}\")\n",
        "        print(f\"Estimated tax owed if sold: ₪{tax:,.2f}\")\n",
        "        print(f\"Amount available for reinvestment after tax: ₪{self.current_value - tax:,.2f}\")\n",
        "\n",
        "        return tax\n",
        "\n",
        "    def compare_investments(self, tax):\n",
        "        self.get_new_investment_details()\n",
        "        amount_after_tax = self.current_value - tax\n",
        "\n",
        "        current_investment_values = [self.project_investment(self.current_value, self.current_yield, self.current_commission, 0, year) for year in range(self.years_to_project + 1)]\n",
        "        new_investment_values = [self.project_investment(amount_after_tax, self.new_yield, self.new_commission, self.new_transaction_fee, year) for year in range(self.years_to_project + 1)]\n",
        "\n",
        "        break_even_year = self.find_break_even_point(self.current_value, amount_after_tax)\n",
        "\n",
        "        print(\"\\nInvestment Comparison:\")\n",
        "        print(f\"Value after {self.years_to_project} years if kept in current investment: ₪{current_investment_values[-1]:,.2f}\")\n",
        "        print(f\"Value after {self.years_to_project} years if moved to new investment: ₪{new_investment_values[-1]:,.2f}\")\n",
        "        print(f\"Break-even point: {break_even_year} years\")\n",
        "\n",
        "        if new_investment_values[-1] > current_investment_values[-1]:\n",
        "            print(f\"{BOLD}{DARK_GREEN}Recommendation: Consider moving to the new investment mechanism.{END}\")\n",
        "        else:\n",
        "            print(f\"{BOLD}{RED}Recommendation: Stay with the current investment mechanism.{END}\")\n",
        "\n",
        "        self.visualize_yields(current_investment_values, new_investment_values)\n",
        "\n",
        "    def visualize_yields(self, current_values, new_values):\n",
        "        years = list(range(self.years_to_project + 1))\n",
        "\n",
        "        plt.figure(figsize=(10, 6))\n",
        "        plt.plot(years, current_values, label='Current Investment', marker='o')\n",
        "        plt.plot(years, new_values, label='New Investment', marker='s')\n",
        "\n",
        "        plt.title('Investment Value Projection')\n",
        "        plt.xlabel('Years')\n",
        "        plt.ylabel('Investment Value (₪)')\n",
        "        plt.legend()\n",
        "        plt.grid(True)\n",
        "\n",
        "        plt.savefig('investment_comparison.png')\n",
        "        print(\"\\nInvestment comparison graph saved as 'investment_comparison.png'\")\n",
        "\n",
        "    def run_analysis(self):\n",
        "        tax = self.analyze_current_investment()\n",
        "        input(\"\\nPress Enter to continue to the new investment comparison...\")\n",
        "        self.compare_investments(tax)\n",
        "\n",
        "# Run the analysis\n",
        "if __name__ == \"__main__\":\n",
        "    analyzer = IsraeliInvestmentAnalyzer()\n",
        "    analyzer.run_analysis()"
      ]
    }
  ]
}